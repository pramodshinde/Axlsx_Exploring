%body.impress-not-supported
  .fallback-message
    %p
      Your browser
      %b doesn't support the features required
      by impress.js, so you are presented with a simplified version of this presentation.
    %p
      For the best experience please use the latest
      = succeed "," do
        %b Chrome
      %b Safari
      or
      %b Firefox
      browser.
  #impress
    #bored.step.slide{"data-x" => "-1000", "data-y" => "-1500"}
      %q
        .w
          %b Because its total assets includes
          %p
            %i 996 commits, 9 branches, 17 releases, 26 contributors, 129,056 downloads
          %p 
            %b So lets  
        %b{style: 'position: absolute;top: 300px;'} Design eXcels using Axlsx
    .step.slide{"data-x" => "0", "data-y" => "-1500"}
      .w
        %b What is Axlsx?
        %p
          Axlsx is a 
          %strong RubyGem
          which generate an Office Open Spreadsheet, with Axlsx you can create excel worksheets with 
          %ul 
            %li automated and fixed column widths, 
            %li customized styles, 
            %li merged cells, 
            %li with formula
            %li images (with links), 
            %li data types and formats
            %li Hyperlinks
            %li charts, 
            %li print options, 
    .step.slide{"data-x" => "1000", "data-y" => "-1500"}
      %q
        %b Lets start with basic
        .w
          require 'axlsx'
          %br p = Axlsx::Package.new
          %br wb = p.workbook
          %pre
            wb.add_worksheet(name: 'Basic Axlsx') do |sheet|
            sheet.add_row ["Name", "Age", "Gender"]
            sheet.add_row ["Neo", 22, "M"]
            sheet.add_row ["Jenny", 20, "F"]
            sheet.add_row ["Ram", 21, "M"]
          %pre
            end
          p.serialize("basic.xlsx")

    .step.slide{"data-x" => "2000", "data-y" => "-1500"}
      %q
        %b Style in your way with options like
        .code
          %br b: true/false
          %br sz: whatever you want
          %br bg_color: "00", fg_color: "FF" 
          %br alignment i.e horizontal, vertical
          %br broder: thin || thick
          %br wrap_text: true || false
    .step.slide{"data-x" => "3000", "data-y" => "-1500"}
      %q 
        %b Define your style 
        %pre
          wb.styels do |s|
          header = s.add_style bg_color: "C0C0C0", b: true, sz: 10
          wb.add_worksheet(name: "Basic Style") do |sheet|
          &nbsp;&nbsp;&nbsp;sheet.add_row ["Name", "Age", "Gender"], style: header
          end
        %pre
          end
        %br
        .w
          Other options
        .code
          %br :alignment => {:horizontal => :right, :vertical => :center}
          %br :border => { :style => :thin, :color => "00" }
          %br :wrap_text => true
    .step.slide{"data-x" => "4000", "data-y" => "-1500"}
      .w
        %br
        %b When it comes to individual column or row
      .w
        For rows & columns
        %pre sheet.col_style 0, header, row_offset: 1
        %pre sheet.row_style 2, header, col_offset: 1
        %br sheet.column_info gives all columns
        %pre sheet.column_info[2], header
        %br sheet.rows gives all rows
        %pre sheet.rows[2], header
        %br Outline level
        %pre sheet.outline_level_rows 1, 2
        %pre sheet.outline_level_columns 1, 2
        

    .step.slide{"data-x" => "5000", "data-y" => "-1500"}
      %q
        %b Specifying widths and height
        %p.small_text this will create row with default widhts fitting text in
        %pre sheet.add_row["I Am to big please fit me inside", "I am default", "I Am costom"]
        .small_text
          In more elegant way we can customize this like
        %pre fit = s.add_style :alignment => {:wrap_text => true}
        %pre sheet.add_row["I Am to big please fit me inside", "I am default", "I Am costom"], style: fit, height: 20
        %pre sheet.column_widths 10, nil, 8

    .step.slide{"data-x" => "6000", "data-y" => "-1500"}
      %q
        %b Putting it together
        %p.small_text we can define multiple styles
        %pre header = s.add_style :bg_color => "C0C0C0", :fg_color => "FF", b: true, :sz => 20, :alignment => { :horizontal=> :center , :wrap_text => true}
        %pre black_col = s.add_style :bg_color => "00", :fg_color => "FF", :sz => 14, :alignment => { :horizontal=> :right , :wrap_text => true}
        %pre blue_col =  s.add_style  :bg_color => "0000FF", :fg_color => "FF", :sz => 20, :alignment => { :horizontal=> :left}
        %pre bold_text =  s.add_style  b: true, :sz => 20 
        %br
        %pre head = ["Name", "Age", "Gender"]
        %pre sheet.add_row head, style: header 
        %pre sheet.add_row ["Neo", 22, "M"], style: [bold_text ,black_col, blue_col] 
        %pre sheet.add_row ["Jenny", 20, "F"], style: [bold_text ,black_col, blue_col] 
    .step.slide{"data-x" => "7000", "data-y" => "-1500"}
      %q
        %b Merging and Defining formula
        %p
          %pre
            wb.add_worksheet(:name => 'Merging Cells') do |sheet|
            sheet.add_row ["col 1", "col 2", "col 3", "col 4"], :sz => 16
            sheet.add_row [1, 2, 3, "=SUM(A2:C2)"]
            sheet.add_row [2, 3, 4, "=SUM(A3:C3)"]
            sheet.add_row ["total", "", "", "=SUM(D2:D3)"]
            sheet.merge_cells("A4:C4")
            sheet["A1:D1"].each { |c| c.color = "FF0000"}
            sheet["A1:D4"].each { |c| c.style = Axlsx::STYLE_THIN_BORDER }
          %pre
            end
    .step.slide{"data-x" => "8000", "data-y" => "-1500"}
      %q
        %b Digging Deeper
    .step.slide{"data-x" => "9000", "data-y" => "-1500"}
      %q
        %b Adding Image
        %pre img = File.expand_path('result.png')
        %pre 
          sheet.add_image(:image_src => img, :hyperlink=>"http://rubyInsense.heroku.com") do |image|
          image.width=720
          image.height=666
          image.hyperlink.tooltip = "Labeled Link"
          image.start_at 2, 2
          image.end_at 200, 200
        %pre
          end
    .step.slide{"data-x" => "10000", "data-y" => "-1500"}
      %q
        %b Data types format
        %pre
          date_format = wb.styles.add_style :format_code => 'YYYY-MM-DD'
          time_format = wb.styles.add_style :format_code => 'hh:mm:ss'
          sheet.add_row ["Date", "Time", "String", "Boolean", "Float", "Integer"]
          sheet.add_row [Date.today, Time.now, "value", true, 0.1, 1], :style => [date_format, time_format]
    .step.slide{"data-x" => "11000", "data-y" => "-1500"}
      %q
        %b Hyperlinks
        %pre 
          wb.add_worksheet(:name => 'hyperlinks') do |sheet|
          sheet.add_row ['axlsx']
          sheet.add_hyperlink :location => 'http://rubyInsense.heroku.com', :ref => sheet.rows.first.cells.first
          sheet.add_hyperlink :location => "'Next Sheet'!A1", :ref => 'A2', :target => :sheet
          sheet.add_row ['next sheet']
        %pre
          end
        %pre
          wb.add_worksheet(:name => 'Next Sheet') do |sheet|
          sheet.add_row ['hello!']
        %pre
          end
    .step.slide{"data-x" => "12000", "data-y" => "-1500"}
      %q
        %b Adding Bar Chart
        %pre
          wb.add_worksheet(:name => "Bar Chart") do |sheet|`
          sheet.add_row ["A Simple Bar Chart"]
          sheet.add_row ["First", "Second", "Third"]
          sheet.add_row [1, 2, 3]
          sheet.add_chart(Axlsx::Bar3DChart, :start_at => "A4", :end_at => "F17") do |chart|
          &nbsp;&nbsp;&nbsp;chart.add_series :data => sheet["A3:C3"], :labels => sheet["A2:C2"], :title => sheet["A1"]
          &nbsp;&nbsp;&nbsp;chart.valAxis.gridlines = false
          &nbsp;&nbsp;&nbsp;chart.catAxis.gridlines = false
          &nbsp;&nbsp;&nbsp;chart.catAxis.label_rotation = 45
          end
        %pre
          end
    .step.slide{"data-x" => "13000", "data-y" => "-1500"}
      %q
        %b Line Chart
        %pre
          wb.add_worksheet(:name => "Line Chart") do |sheet|
          sheet.add_row ["First", 1, 5, 7, 9]
          sheet.add_row ["Second", 5, 2, 14, 9]
          sheet.add_chart(Axlsx::Line3DChart, :title => "Line Chart") do |chart|
          &nbsp;&nbsp;&nbsp;chart.start_at 0, 2
          &nbsp;&nbsp;&nbsp;chart.end_at 10, 15
          &nbsp;&nbsp;&nbsp;chart.add_series :data => sheet["B1:E1"], :title => sheet["A1"]
          &nbsp;&nbsp;&nbsp;chart.add_series :data => sheet["B2:E2"], :title => sheet["A2"]
          &nbsp;&nbsp;&nbsp;chart.catAxis.title = 'Y Axis'
          &nbsp;&nbsp;&nbsp;chart.valAxis.title = 'X Axis'
          end
        %pre
          end
    .step.slide{"data-x" => "14000", "data-y" => "-1500"}
      %q
        %b Pie Chart
        %pre
          wb.add_worksheet(:name => "Pie Chart") do |sheet|
          sheet.add_row ["Grade", "Percentage"]
          sheet.add_row ["A", @a]
          sheet.add_row ["B", @b]
          sheet.add_row ["C", @c]
          sheet.add_chart(Axlsx::Pie3DChart, :start_at => [0,5], :end_at => [10, 20], :title => "Pie Chart") do |chart|
          &nbsp;&nbsp;&nbsp;chart.add_series :data => sheet["B2:B4"], :labels => sheet["A2:A4"],  :colors => ['FF0000', '00FF00', '0000FF']
          &nbsp;&nbsp;&nbsp;chart.d_lbls.d_lbl_pos = :bestFit
          &nbsp;&nbsp;&nbsp;chart.d_lbls.show_val = :true
          &nbsp;&nbsp;&nbsp;chart.d_lbls.show_percent = :true
          end 
        %pre
          end
    .step.slide{"data-x" => "15000", "data-y" => "-1500"}
      %q
        %b Customizing Printing with ease
        %pre margins = {:left => 3, :right => 3, :top => 1.2, :bottom => 1.2, :header => 0.7, :footer => 0.7}
        %pre setup = {:fit_to_width => 1, :orientation => :landscape, :paper_width => "297mm", :paper_height => "210mm"}
        %pre options = {:grid_lines => true, :headings => true, :horizontal_centered => true}
        %pre          
          wb.add_worksheet(:name => "print margins", :page_margins => margins, :page_setup => setup, :print_options => options) do |sheet|
          sheet.add_row ["this sheet uses customized print settings"]
        %pre
          end

    .step.slide{"data-x" => "16000", "data-y" => "-1500"}
      %q
        .w
          %p For more on Axlsx
          %p https://github.com/pramodshinde/Axlsx_examples
          %b{style: 'position: absolute;top: 300px; font-size: 50px;'} Thank You!!! :)
<script src="assets/impress.js"></script>
:javascript
  impress().init();    
  var api = impress();
  if ("ontouchstart" in document.documentElement) { 
      document.querySelector(".hint").innerHTML = "<p>Tap on the left or right to navigate</p>";
  }
